#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
DATADIR='@datadir@'
SYSCONFDIR='@sysconfdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-yaml-check.sh
import ${LIBDIR}/util-profile.sh

show_profile(){
    msg2 "yaml_dir: %s" "${yaml_dir}"
    msg2 "autologin: %s" "${autologin}"

    msg2 "netgroups: %s" "$(get_yaml)"

    msg2 "hostname: %s" "${hostname}"
    msg2 "username: %s" "${username}"
    msg2 "password: %s" "${password}"
    msg2 "addgroups: %s" "${addgroups}"

    msg2 "enable_live: %s" "${enable_live[*]}"
    msg2 "openrc_boot: %s" "${openrc_boot[*]}"
    msg2 "openrc_default: %s" "${openrc_default[*]}"
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "profile: %s" "${profile}"
    msg2 "arch: %s" "${target_arch}"
    msg2 "initsys: %s" "${initsys}"
    msg2 "kernel: %s" "${kernel}"

    msg "ARGS:"
    msg2 "group: %s" "${group}"
    msg2 "calamares: %s" "${calamares}"

    msg "BUILD:"
    show_profile
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"

pretend=false
group=false
cache_dir_netinstall="${workspace_dir}/netinstall"
calamares=false

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -p <profile>       Buildset or profile [default: ${profile}]"
    echo "    -a <arch>          Arch [default: ${target_arch}]"
    echo "    -k <name>          Kernel to use[default: ${kernel}]"
    echo "    -i <name>          Init system to use [default: ${initsys}]"
    echo '    -g                 Enable pacman group accepted for -p'
    echo '    -c                 Check also calamares yaml files generated for the profile'
    echo '    -q                 Query settings'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:a:i:k:gcqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) profile="$OPTARG" ;;
        a) target_arch="$OPTARG" ;;
        i) initsys="$OPTARG" ;;
        k) kernel="$OPTARG" ;;
        g) group=true ;;
        c) calamares=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

prepare_build

${pretend} && display_settings && exit 1

${group} && write_pacman_group_yaml "${profile}" && exit 0

build
