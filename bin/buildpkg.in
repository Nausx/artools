#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

shopt -s nullglob

LIBDIR='@libdir@'
DATADIR='@datadir@'
SYSCONFDIR='@sysconfdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-chroot.sh
import ${LIBDIR}/util-pkg.sh
import ${LIBDIR}/util-pkg-chroot.sh

show_pkg(){
    check_build "$1"
    cd $1
        source PKGBUILD
        for n in ${pkgname[@]}; do
            msg2 "%s" "$n"
        done
    cd ..
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "arch: %s" "${target_arch}"
    msg2 "chroots_pkg: %s" "${chroots_pkg}"

    msg "ARGS:"
    msg2 "create_first: %s" "${create_first}"
    msg2 "delete_first: %s" "${delete_first}"
    msg2 "clean_first: %s" "${clean_first}"
    msg2 "update_first: %s" "${update_first}"
    msg2 "namcap: %s" "${namcap}"

    if ${create_first};then
        msg "PKG:"
        msg2 "packages: %s" "${packages[*]}"
    fi

    msg "BUILD:"
    show_pkg "${package}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

create_first=false
delete_first=false
clean_first=false
update_first=false
namcap=false
pretend=false
is_multilib=false

mkchroot_args=()
mkchrootpkg_args=(-c -n)

install_pkgs=()
repository=${PWD##*/}
package=''

prepare_build(){
    local pac_arch='default'

    if [[ "${target_arch}" == 'multilib' ]];then
        pac_arch='multilib'
        is_multilib=true
    fi

    local pacman_conf="${DATADIR}/pacman-$pac_arch.conf"
    [[ -f $AT_USERCONFDIR/pacman-$pac_arch.conf ]] && pacman_conf="$AT_USERCONFDIR/pacman-$pac_arch.conf"

    work_dir="${chroots_pkg}/${target_arch}/${repository}"

    local makepkg_conf=$(get_makepkg_conf "${target_arch}")

    [[ "$pac_arch" == 'multilib' ]] && target_arch='x86_64'

    mkchroot_args+=(-C ${pacman_conf} -M ${makepkg_conf})

    mkchrootpkg_args+=(-r ${work_dir})

    prepare_dir "${work_dir}"

    packages=('base-devel')
    ${is_multilib} && packages+=('multilib-devel')

    timer_start=$(get_timer)
}

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -p <pkg>           Package to build [default: ${package}]"
    echo "    -a <arch>          Arch [default: ${target_arch}]"
    echo '    -r <dir>           Chroots directory'
    echo "                       [default: ${chroots_pkg}]"
    echo '    -o                 Create chroot'
    echo '    -d                 Delete chroot'
    echo '    -c                 Clean chroot copy'
    echo '    -u                 Update chroot copy'
    echo '    -n                 Install and run namcap check'
    echo '    -q                 Query settings and pretend build'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:a:r:i:odcunqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) package="$OPTARG" ;;
        a) target_arch="$OPTARG" ;;
        r) chroots_pkg="$OPTARG" ;;
        i) install_pkgs+=("$OPTARG"); mkchrootpkg_args+=(-I "${install_pkgs[*]}") ;;
        o) create_first=true ;;
        d) delete_first=true ;;
        c) clean_first=true ; mkchrootpkg_args+=(-c) ;;
        u) update_first=true ; mkchrootpkg_args+=(-u) ;;
        n) namcap=true; mkchrootpkg_args+=(-n) ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '%s'" "${arg}"; usage 1 ;;
    esac
done

# shift $(($OPTIND - 1))
makechrootpkg_args+=("${@:$OPTIND}")

check_root

prepare_build

${pretend} && display_settings && exit

if ${delete_first};then
    delete_chroot "${work_dir}/root" "${work_dir}"
    delete_chroot "${work_dir}/$OWNER" "${work_dir}"
fi

if ${create_first} || [[ ! -d ${work_dir}/root ]];then
    create_chroot "${mkchroot_args[@]}" "${work_dir}/root" "${packages[@]}"
fi

build "${package}"
